"""
Created on Wed Jan 15 11:19:53 2020

@author: EO
"""

from Spacecraft.Spacecraft import Spacecraft
from Dynamics.SimTime import SimTime
from Interface.Initializer import InitialConfig
from Interface.Logger import Logger
from Dynamics.CelestialBody.Ephemeris import Ephemeris
from Environments.Environment import Environment
from Disturbance.Disturbances import Disturbances

import numpy as np
import pandas as pd
import datetime

twopi   = 2.0 * np.pi
deg2rad = np.pi / 180.0
rad2deg = 1 / deg2rad


class MainSimulation(InitialConfig, Logger):
    def __init__(self):

        InitialConfig.__init__(self)
        Logger.__init__(self, self.logger_properties)

        self.simtime = SimTime(self.time_properties)
        self.spacecraft = Spacecraft(self.spacecraft_properties, self.components_properties, self.simtime)

        #self.dynamics = Dynamics(self.spacecraft.orbit_properties, self.spacecraft.attitude_properties)

        self.ephemeris = Ephemeris(self.ephemeris_properties)
        self.environment = Environment(self.environment_properties)
        self.disturbance = Disturbances(self.disturbance_properties)

        # Auxiliary variables
        date = datetime.datetime.now()
        self.filename = date.strftime('%Y-%m-%d %H-%M-%S')

    def run_simulation(self):
        self.spacecraft.dynamics.orbit.set_propagator()
        # Loop
        self.simtime.reset_countTime()
        print('Simulation running...')
        while self.simtime.maincountTime <= self.simtime.endsimTime:

            # current orbit position, velocity
            if self.simtime.orbit_update_flag:
                self.spacecraft.update()

                self.ephemeris.earth.getSideral(self.simtime.current_jd)
                #self.current_lat, self.current_long, self.current_alt = self.dynamics.orbit.propagate.TransECItoGeo(
                #    self.ephemeris.earth.current_sideral)
                self.spacecraft.dynamics.orbit.TransECItoGeo(self.ephemeris.earth.current_sideral)
                self.simtime.orbit_update_flag = False

            # current Environment and disturbances
            self.environment.update_environment(self.simtime.current_decyaer,
                                                self.ephemeris.earth.current_sideral,
                                                self.spacecraft.dynamics.orbit.current_lat,
                                                self.spacecraft.dynamics.orbit.current_long,
                                                self.spacecraft.dynamics.orbit.current_alt,
                                                self.spacecraft.dynamics.attitude.current_quaternion_i2b)

            self.disturbance.update_disturbances(self.environment.get_mag_b())

            # Add the force and torque generated by the disturbance for the next dynamics propagation
            #self.add_ext_force_b()
            self.spacecraft.dynamics.attitude.add_ext_torque_b(self.disturbance.get_dist_torque())

            # Add the force and torque generated by the satellite for the next dynamics propagation
            #self.add_int_force(self.main_spacecraft.generate_force_b(inputs_parameters))

            control_torque = self.spacecraft.generate_torque_b()
            self.spacecraft.dynamics.attitude.add_int_torque_b(control_torque)

            if self.simtime.log_flag:
                self.spacecraft.update_data()
                self.ephemeris.earth.gst_Update()
                self.simtime.progressionsimTime()
                self.simtime.log_flag = False

            # update time
            self.simtime.updateSimtime()

        # Data report to create dictionary
        self.spacecraft.create_data()
        self.ephemeris.earth.create_report()

        # Save Dataframe pandas in csv file
        self.save_data()
        print('Finished')

    def save_data(self):
        master_data = {**self.spacecraft.master_data_satellite, **self.ephemeris.earth.h_gst}
        database = pd.DataFrame(master_data, columns=master_data.keys())
        database.to_csv("./Data/logs/"+self.filename+".csv", index=False, header=True)
        print("Data created")
